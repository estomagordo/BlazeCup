@page "/"
@using  Models
@inject HttpClient Http
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

@if (!Loaded)
{
    <p><em>Snart så</em></p>
}
else
{
    <div style='display: @(ActivePage == Page.Landing ? "initial" : "none")'>
        <button class="btn btn-primary" onclick="@ViewStandings">Se poängställningen</button>
        <input type="text" placeholder="Hämta upp din tipsrad" onchange=@(e => EmailFieldChanged(e)) />
    </div>
    @*<div style='@(ActivePage == Page.Registration ? string.Empty : "display: none")'>
        <Registration ParticipantSubmission="@(new Submission())" Locked="@false"></Registration>
    </div>*@
    <div style='@(ActivePage == Page.ViewSubmission ? string.Empty : "display: none")'>
        <SubmissionView ParticipantSubmission="@ParticipantSubmission" Teams="@Teams"></SubmissionView>
        <button id="to-landing" class="btn btn-primary" onclick="@ToLanding">Tillbaka till startsidan</button>
    </div>
    <div style='@(ActivePage == Page.Standings ? string.Empty : "display: none")'>
        <Standings Groups="@Groups" Teams="@Teams" Submissions="@Submissions" PlayedMatchCount="@PlayedMatchCount"></Standings>
        <button id="to-landing" class="btn btn-primary" onclick="@ToLanding">Tillbaka till startsidan</button>
    </div>
}

@functions {

    Submission ParticipantSubmission { get; set; }
    List<Submission> Submissions { get; set; }
    List<Group> Groups { get; set; }
    List<Team> Teams { get; set; }
    private int PlayedMatchCount { get; set; } = 0;
    private bool Loaded { get; set; } = false;

    private enum Page
    {
        Landing,
        Registration,
        ViewSubmission,
        Standings
    }

    private Page ActivePage { get; set; } = Page.Landing;

    private void ViewStandings()
    {
        ActivePage = Page.Standings;
    }

    private void ToLanding()
    {
        ActivePage = Page.Landing;
    }

    private void EmailFieldChanged(UIChangeEventArgs e)
    {
        var newValue = e.Value.ToString();
        var matchingSubmission = Submissions.FirstOrDefault(s => s.Email == newValue);

        if (matchingSubmission != null)
        {
            ParticipantSubmission = matchingSubmission;
            Console.WriteLine("In index");
            Console.WriteLine(ParticipantSubmission.Groups.Count);
            ActivePage = Page.ViewSubmission;
        }
    }

    protected override async Task OnInitAsync()
    {
        Teams = await Http.GetJsonAsync<List<Team>>("/sample-data/Teams.json");
        Groups = await Http.GetJsonAsync<List<Group>>("/sample-data/groups.json");

        Groups.ForEach(g =>
        {
            g.Teams = new List<Team>();
            g.Matches = new List<Match>();

            g.TeamNames.ForEach(tn =>
            {
                g.Teams.Add(Teams.First(t => t.Name == tn));
            });

            g.MatchNames.ForEach(mn =>
            {
                g.Matches.Add(new Match()
                {
                    Home = Teams.First(t => t.Name == mn[0]),
                    Away = Teams.First(t => t.Name == mn[1])
                });
            });
        });

        Submissions = await Http.GetJsonAsync<List<Submission>>("sample-data/submissions.json");

        Submissions.ForEach(s =>
        {
            s.Groups.ForEach(g =>
            {
                var actualGroup = Groups.First(ag => ag.Name == g.Name);

                g.Matches.ForEach(m =>
                {
                    if (actualGroup.PlayedMatches != null)
                    {
                        var matchingMatch = actualGroup.PlayedMatches.FirstOrDefault(pm => pm[0] == m.Home.Name && pm[1] == m.Away.Name);
                        if (matchingMatch == null)
                        {
                            m.HomeActualGoals = -1;
                            m.AwayActualGoals = -1;
                        }
                        else
                        {
                            PlayedMatchCount++;
                            m.HomeActualGoals = int.Parse(matchingMatch[2]);
                            m.AwayActualGoals = int.Parse(matchingMatch[3]);
                        }
                    }
                    else
                    {
                        m.HomeActualGoals = -1;
                        m.AwayActualGoals = -1;
                    }
                });
            });
        });

        Submissions = Submissions.OrderBy(s => s.Score * -1).ThenBy(s => s.Name).ToList();

        ParticipantSubmission = Submissions.First();

        Loaded = true;
    }
}