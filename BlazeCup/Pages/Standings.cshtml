@using  Models
@using BlazeCup.Logic
@inject HttpClient Http

@if (!Complete)
{
    <p><em>Vänta</em></p>
}
else
{
    <h4>Ställning efter @(PlayedMatchCount / Submissions.Count) match@(PlayedMatchCount / Submissions.Count == 1 ? "" : "er")</h4>
    <div class="row">
        <div class="col-sm-6">
            Namn
        </div>
        <div class="col-sm-6">
            Poäng
        </div>
    </div>
    @foreach (var submission in Submissions)
    {
        <div class="row">
            <div class="col-sm-6">
                @submission.Name
            </div>
            <div class="col-sm-6">
                @submission.Score
            </div>
        </div>
    }
}

@functions {

    private List<Group> Groups { get; set; }
    private List<Team> Teams { get; set; }
    List<Submission> Submissions { get; set; }
    private bool Complete { get; set; } = false;
    private int PlayedMatchCount { get; set; } = 0;

    protected override async Task OnInitAsync()
    {
        Teams = await Http.GetJsonAsync<List<Team>>("/sample-data/teams.json");
        Groups = await Http.GetJsonAsync<List<Group>>("/sample-data/groups.json");

        Groups.ForEach(g =>
        {
            g.Teams = new List<Team>();
            g.Matches = new List<Match>();

            g.TeamNames.ForEach(tn =>
            {
                g.Teams.Add(Teams.First(t => t.Name == tn));
            });

            g.MatchNames.ForEach(mn =>
            {
                g.Matches.Add(new Match()
                {
                    Home = Teams.First(t => t.Name == mn[0]),
                    Away = Teams.First(t => t.Name == mn[1])
                });
            });
        });

        Submissions = await Http.GetJsonAsync<List<Submission>>("sample-data/submissions.json");

        Submissions.ForEach(s =>
        {
            s.Groups.ForEach(g =>
            {
                var actualGroup = Groups.First(ag => ag.Name == g.Name);

                g.Matches.ForEach(m =>
                {
                    if (actualGroup.PlayedMatches != null)
                    {
                        var matchingMatch = actualGroup.PlayedMatches.FirstOrDefault(pm => pm[0] == m.Home.Name && pm[1] == m.Away.Name);
                        if (matchingMatch == null)
                        {
                            m.HomeActualGoals = -1;
                            m.AwayActualGoals = -1;
                        }
                        else
                        {
                            PlayedMatchCount++;
                            m.HomeActualGoals = int.Parse(matchingMatch[2]);
                            m.AwayActualGoals = int.Parse(matchingMatch[3]);
                        }
                    }
                    else
                    {
                        m.HomeActualGoals = -1;
                        m.AwayActualGoals = -1;
                    }
                });
            });
        });

        Submissions = Submissions.OrderBy(s => s.Score * -1).ThenBy(s => s.Name).ToList();
        Complete = true;
    }

}